#!/usr/bin/env python
import sys
import os

def epure(string):
    while (len(string) > 0 and (string[0] == " " or string[0] == "\t" or string[len(string) - 1] == " " or string[len(string) - 1] == "\t" or string[len(string) - 1] == "\n")):
        string = string.strip(" ").strip("\t").strip("\n")
    return string

def check_param():
    if len(sys.argv) < 2 or not os.path.exists(sys.argv[1]):
        print("Usage : " + sys.argv[0] + " Makefile [file]")
        exit(84)
    files = None
    if len(sys.argv) > 2:
        files = list()
        for i in range(2, len(sys.argv)):
            files.append(sys.argv[i])
    return files

def get_names(rules):
    names = set()
    for i, j in rules.items():
        names.add(i)
        for k in j[0]:
            names.add(k)
    return sorted(names)

def display_matrix(names, rules):
    for name in names:
        values = []
        v = rules.get(name)
        for n in names:
            if v is not None and n in v[0]:
                values.append(1)
            else:
                values.append(0)
        print("[", end="")
        for i in range(0, len(values)):
            print(values[i], end="")
            print(" " if i != len(values) - 1 else "]", end="")
        print()
    print()

def recur(liste, current, first = False):
    rule = current[len(current) - 1]
    value = rules.get(rule)
    if not first:
        liste.append(list(reversed(current.copy())))
    if value is not None:
        for dep in value[0]:
            c = current.copy()
            c.append(dep)
            recur(liste, c)
    pass

def get_tree(main):
    tree = list()
    if main is not None:
        current = list()
        current.append(main)
        recur(tree, current, True)
    return sorted(tree)

def display_dep(tree):
    for branch in tree:
        for i in range(0, len(branch)):
            print(branch[i], end="")
            print(" -> " if i != len(branch) - 1 else "", end="")
        print()

def print_lines(files, tree, rules, main):
    for f in files:
        ok = False
        for branch in tree:
            if branch[0] == f:
                for i in range(1, len(branch)):
                    r = rules.get(branch[i])
                    if not r:
                        exit(84)
                    for r2 in r[1]:
                        if len(r2) > 0:
                            print(r2)
                ok = True
        if not ok and f != main:
            exit(84)

if __name__ == "__main__":
    files = check_param()
    fd = open(sys.argv[1])
    rules = dict()
    main = None
    current = None
    for line in fd:
        line.strip("\n").split("#")[0]
        if line == "":
            continue
        delimiter = line.find(":")
        if delimiter >= 0:
            rule = epure(line[:delimiter])
            dep = epure(line[delimiter + 1:]).split(" ")
            rules[rule] = (dep, list())
            current = rules[rule]
            if main is None:
                main = rule
        elif len(line) > 0:
            tab = " ".join(epure(line).split(" "))
            if current is None:
                exit(84)
            current[1].append(tab)
        else:
            exit(84)
    fd.close()
    names = get_names(rules)
    if files is None:
        display_matrix(names, rules)
    tree = get_tree(main)
    if files is None:
        display_dep(tree)
    else:
        print_lines(files, tree, rules, main)
    exit(0)
