#!/usr/bin/env python
import sys
import os

make_vars = dict()
make_rules = dict()
main_rule = None
current_rule = None

def recur(lst, current, first=False):
    rul = current[len(current) - 1]
    val = make_rules.get(rul)
    if not first:
        lst.append(list(reversed(current.copy())))
    if val is not None:
        for de in val[0]:
            cu = current.copy()
            cu.append(de)
            recur(lst, cu)
    pass


def strip(string):
    while len(string) > 0 and (string[0] == " " or string[0] == "\t"):
        string = string.strip(" ").strip("\t")
    while len(string) > 0 and (string[len(string) - 1] == " " or string[len(string) - 1] == "\t"):
        string = string.strip(" ").strip("\t")
    return string


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage : " + sys.argv[0] + " Makefile [file]")
        exit(84)

    modified = None
    if len(sys.argv) > 2:
        modified = list()
        for i in range(2, len(sys.argv)):
            modified.append(sys.argv[i])

    if not os.path.exists(sys.argv[1]):
        exit(84)
    file = open(sys.argv[1])
    for line in file:
        line = line.strip("\n").split("#")[0]
        if line == "":
            continue
        i2 = line.find(":")
        if i2 != -1:
            rule = strip(line[:i2])
            dep = strip(line[i2 + 1:])
            dep = dep.split(" ")
            make_rules[rule] = (dep, list())
            current_rule = make_rules[rule]
            if main_rule is None:
                main_rule = rule
        elif len(line) > 0:
            cmd = strip(line)
            split = cmd.split(" ")
            cmd = " ".join(split)
            if current_rule is None:
                exit(84)
            current_rule[1].append(cmd)
        else:
            exit(84)
    file.close()

    names = set()
    for r, c in make_rules.items():
        names.add(r)
        for d in c[0]:
            names.add(d)
    names = sorted(names)

    if modified is None:
        for name in names:
            values = []
            v = make_rules.get(name)
            for name2 in names:
                if v is not None and name2 in v[0]:
                    values.append(1)
                else:
                    values.append(0)
            print("[", end="")
            for i in range(0, len(values)):
                print(values[i], end="")
                print(" " if i != len(values) - 1 else "]", end="")
            print()
        print()

    tree = list()
    if main_rule is not None:
        cur = list()
        cur.append(main_rule)
        recur(tree, cur, True)
    tree = sorted(tree)

    if modified is None:
        for branch in tree:
            for i in range(0, len(branch)):
                print(branch[i], end="")
                print(" -> " if i != len(branch) - 1 else "", end="")
            print()

    if modified is not None:
        for m in modified:
            ok = False
            for branch in tree:
                if branch[0] == m:
                    for i in range(1, len(branch)):
                        r = make_rules.get(branch[i])
                        if not r:
                            exit(84)
                        for r2 in r[1]:
                            print(r2)
                    ok = True
            if not ok and m != main_rule:
                exit(84)

    exit(0)
